<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[The Nerdings]]></title>
  <link href="http://thenerdings.com/atom.xml" rel="self"/>
  <link href="http://thenerdings.com/"/>
  <updated>2014-09-09T13:11:31-05:00</updated>
  <id>http://thenerdings.com/</id>
  <author>
    <name><![CDATA[Joe Goggins]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Containerization: Galloping Unicorns From the Future]]></title>
    <link href="http://thenerdings.com/blog/2014/09/09/containerization-galloping-unicorns-from-the-future/"/>
    <updated>2014-09-09T12:19:24-05:00</updated>
    <id>http://thenerdings.com/blog/2014/09/09/containerization-galloping-unicorns-from-the-future</id>
    <content type="html"><![CDATA[<p>Containerization is a galloping unicorn from the future of cloud operations. In it&rsquo;s bursting saddlebags it posesses magic relics to:</p>

<ol>
<li>eliminate the pain of setting up application development environments</li>
<li>drastically reduce the time it takes to spin up cloud infrastructure for production, testing, high-availability, or auto-scaling</li>
<li>decrease cloud operating costs by piling many containers onto single virtual machines instead of individual [under-utilized] machines.</li>
<li>improve security by isolating application processes further with containers</li>
<li>facilitate rapid sharing of complex infrastructure across cloud providers.</li>
</ol>


<p>But <strong>it&rsquo;s not the end all be all and in many of these promises it&rsquo;s still quite rough around the edges</strong>. It should DEFINITELY be a huge part of your medium and long term roadmaps, but if you&rsquo;re thinking you can swoop through and realize value in your organization from all of these in a couple of days, you have another thing coming.  Here&rsquo;s a list on my take of each of these areas with</p>

<h3>1. eliminate the pain of setting up application development environments</h3>

<p>These two articles (<a href="http://www.talkingquickly.co.uk/2014/06/rails-development-environment-with-vagrant-and-docker">1</a>, <a href="https://blog.abevoelker.com/rails-development-using-docker-and-vagrant">2</a> ) do an excellent job explaining how you go about building a Docker + Vagrant workflow to build a portable Rails environment. Though they certainly exhibit some great capabilities, if you have a team that doesn&rsquo;t spin up local VM&rsquo;s regularly, rough edges of using boot2docker (like it&rsquo;s special IP, it&rsquo;s sideloaded VM, and the <code>DOCKER_HOST</code> env var to name a few) can burn you and result in a lot confusion and time spent troublingshooting the &ldquo;portable painless dev env&rdquo;.</p>

<p>It&rsquo;s still worth pursuing because the container/virtualization knowledge gained is valueable. But it&rsquo;s not gonna happen instantly.</p>

<h3>2. drastically reduce the time it takes to spin up cloud infrastructure for production, testing, high-availability, or auto-scaling</h3>

<p>For production container usage, <a href="https://downloads.getchef.com/chef-dk/">Chef-DK</a> + <a href="https://github.com/opscode/knife-container">knife-container</a> are the jam. However, more a still beta and their actual functionality is fairly limited, you still need to know a bunch about Docker to really do something cool here.</p>

<p>For infrastructure testing, <a href="http://kitchen.ci/docs/getting-started">Test-Kitchen</a> + <a href="https://github.com/portertech/kitchen-docker">kitchen-docker</a> are incredible. However, it&rsquo;s no small feet to get the prerequisite testing harness/infrastructure up before it can deliver on the dream of spinning up entire clusters as containers, running tests, and destroying them in seconds rather than minutes.</p>

<h3>3. decrease cloud operating costs by piling many containers onto single virtual machines instead of individual [under-utilized] machines.</h3>

<p>I drool over <a href="https://coreos.com/">CoreOS</a>. An amazing Docker enabled technology that combines</p>

<ul>
<li>the [best] init + process supervision system in existence that most major linux distributions (including Ubuntu) are switching to (<a href="http://www.freedesktop.org/wiki/Software/systemd/">systemd</a>),</li>
<li><a href="https://coreos.com/using-coreos/etcd/">etcd</a> a high-available key value config +service discovery tool for clusters,</li>
<li>and <a href="https://coreos.com/docs/launching-containers/launching/fleet-example-deployment/">fleet</a> an amazing tool that makes systemd behave sensibly + intelligently across a cluster of containers.</li>
</ul>


<p>Of all the magical goodies the containerzation unicorn brings, this is the one I&rsquo;m currently most stoked about.  It&rsquo;s also a paradigm rethink and thus for most cloud ops shops, it&rsquo;s a big endeavor.</p>

<h3>4. improve security by isolating application processes further with containers</h3>

<p>Yep. It&rsquo;s great that tools like <a href="https://docs.getchef.com/containers.html">chef-container</a> strip out all of the important encryption and auth settings when spinning up new docker container.</p>

<p>Again, this tech is still bleeding beta software. Furthermore, there is still a lot of uncertainty as to what the best practices are for running hybrid configurations that combine the idea of <a href="http://www.getchef.com/blog/2014/06/23/immutable-infrastructure-practical-or-not/">immutable infrastructure</a>, (also see <a href="http://chadfowler.com/blog/2013/06/23/immutable-deployments/">1</a>,<a href="http://blog.codeship.io/2013/09/06/the-codeship-workflow-part-4-immutable-infrastructure.html">2</a>) that Docker espouses mixed with some of the dynamism of Chef.  It&rsquo;s something to play with and figure out over the next couple of months.</p>

<h3>5. facilitate rapid sharing of complex infrastructure across cloud providers.</h3>

<p><a href="https://hub.docker.com/">DockerHub</a> is RAD! GitHub for complex OS images.  Who is gonna argue with that?</p>

<p>Though there are some good images out there, without established norms about how to guarantee a published image is built a certain way, I have a hard time not viewing this as an attack vector analogous to a site or email that wants you to download and execute a malicious binary to your computer.  Given the number of smart people pouring into this space, I would expect this area to mature rapidly. Also, as the community grows the robustness of the peer review system will improve.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Brutality of Git]]></title>
    <link href="http://thenerdings.com/blog/2014/06/24/the-brutality-of-git/"/>
    <updated>2014-06-24T22:53:58-05:00</updated>
    <id>http://thenerdings.com/blog/2014/06/24/the-brutality-of-git</id>
    <content type="html"><![CDATA[<p>I love Git. Live by it. Swear by it. Interact with it all the damn time. I mostly love it.</p>

<p>Sometimes it stabs me in the face though&hellip;while on master:</p>

<pre><code># Grab the latest
git pull

# Deploy a branch to heroku: 
git push --force staging feature/the_awesome_sauce:master
</code></pre>

<p>Then boom, the shank to the face:</p>

<p><strong>feature/the_awesome_sauce is not deployed like I think</strong></p>

<p>Instead, a old commit from the feature/the_awesome_sauce is deployed, arrrrr&hellip;</p>

<p>They be different:</p>

<pre><code>the_project$ git show-ref feature/the_awesome_sauce
6c9900faca9g2d758bf6g00a7418af37b315f3a7 refs/heads/feature/private_libraries
ecc4c76220c5d399c0e1d53e950e456a4329ad56 refs/remotes/origin/feature/private_libraries
</code></pre>

<p>Don&rsquo;t get stabbed in the face. Know the difference between remote and local branches.</p>

<p>Use <code>git push --force staging origin/feature/the_awesome_sauce:master</code> next time.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Controlling a Spark Core Remote Control Car With a Bash Script]]></title>
    <link href="http://thenerdings.com/blog/2013/12/04/controlling-spark-core-remote-control-car-with-a-bash-script/"/>
    <updated>2013-12-04T01:14:00-06:00</updated>
    <id>http://thenerdings.com/blog/2013/12/04/controlling-spark-core-remote-control-car-with-a-bash-script</id>
    <content type="html"><![CDATA[<p>I just wrote a bash script to control a Spark Core powered remote control car over the internet. Hit &ldquo;f&rdquo; to go forward, hit &ldquo;b&rdquo; to backward, etc. Kinda sweet.</p>

<p>I grabbed the <a href="http://docs.spark.io/#/shields">RC Car Spark Core firmware code</a>, compiled it + flashed it to the core over USB by following <a href="https://github.com/spark/core-firmware">these instructions</a>. Essentially, I replaced the src/application.cpp with the code from the site and ran <code>make clean dependents all</code>, then used dfu-util to flash it.</p>

<p>I wrote up this script to make interacting with this simple Spark Core program a little less cumbersome, to use at the <a href="https://www.facebook.com/events/1422886744594947/">Tinkerer&rsquo;s Ball</a> at the Science Mueseum this Thursday, and also for folks who are looking for something minimal to wrap up curl commands that they are throwing at the Spark Cloud API to talk to their Spark Core firmware program.</p>

<p><a href="https://vimeo.com/80969794">Here&rsquo;s a short vid of me getting jazzed about this with my nasty mustache</a> (This is a hangover from Spark&rsquo;s wonderous partaking in <a href="http://us.movember.com/team/1217549">Movember</a>.  Someone kill that thing! It&rsquo;s 4 days into December man!)</p>

<p>The idea of this bash script is to set SPARK_CORE_DEVICE_ID and SPARK_CORE_ACCESS_TOKEN, then run a pre-defined function that loops for input and translates that <a href="http://docs.spark.io/#/api">Spark Cloud API</a> curl commands. Please fork or comment if applicable.</p>

<div><script src='https://gist.github.com/7777824.js'></script>
<noscript><pre><code># About
# =====
#
# Control a Spark Core remote control car with a bash script. Why not?
#
# Install
# -------
#
# Add something like this to you bash profile:
#
#     export SPARK_CORE_DEVICE_ID=YOUR_DEVICE_ID_GOES_HERE
#     export SPARK_CORE_ACCESS_TOKEN=YOUR_ACCESS_TOKEN_GOES_HERE
#     source ~/Downloads/spark_core_rc_car_bash_script.sh &lt;&lt;&lt;- YOU WILL NEED TO CHANGE THIS!
#
# Source it:
#
#     source ~/.profile
#
# And Run
#
#     rc_while
#
# Commands:
#
#     f=forward, b=back, l=left, r=right, s=stop
#
#
# 
function rc_while() {
  while read _c;do
    rc &quot;$_c&quot;
  done
}

function rc() {
  _base_command='curl https://api.spark.io/v1/devices/'&quot;$SPARK_CORE_DEVICE_ID&quot;'/rccar -d access_token='&quot;$SPARK_CORE_ACCESS_TOKEN&quot;' -d &quot;params=rc,__CMD__&quot;'
  case &quot;$1&quot; in
  f) echo &quot;Forward march!&quot;
    _command=$(echo &quot;${_base_command}&quot; | sed 's/__CMD__/FORWARD/')
     ;;
  b) echo &quot;Come on back now&quot;
    _command=$(echo &quot;${_base_command}&quot; | sed 's/__CMD__/BACK/')
     ;;
  l) echo &quot;Hang a lu lu&quot;
    _command=$(echo &quot;${_base_command}&quot; | sed 's/__CMD__/LEFT/')
     ;;
  r) echo &quot;Hang a rubarb&quot;
    _command=$(echo &quot;${_base_command}&quot; | sed 's/__CMD__/RIGHT/')
     ;;
  s) echo &quot;Stop!&quot;
    _command=$(echo &quot;${_base_command}&quot; | sed 's/__CMD__/STOP/')
     ;;
  *) echo &quot;Don't know what to do with $1 : f=forward, b=back, l=left, r=right, s=stop&quot;
     ;;
  esac

  echo $_command
  echo $_command | bash
}</code></pre></noscript></div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello Octopress (Goodbye Blogger)]]></title>
    <link href="http://thenerdings.com/blog/2013/10/02/hello-octopress/"/>
    <updated>2013-10-02T22:55:00-05:00</updated>
    <id>http://thenerdings.com/blog/2013/10/02/hello-octopress</id>
    <content type="html"><![CDATA[<p>This here blog is the new location of <a href="http://thenerdings.blogspot.com...">http://thenerdings.blogspot.com&#8230;</a></p>

<p>Octopress and Jekyll seem awesome! I&rsquo;m jazzed to be able to write in my tricked-out text editor, use git + github.io/github-pages to deploy, and to develop blog posts the way I develop code.  It jives with how I roll.  For a dude who gets huffy-puffy when the pointy-clicky things fight me, a blogging platform made for hackers seems like a wonderful thing&hellip;here we go.</p>
]]></content>
  </entry>
  
</feed>
